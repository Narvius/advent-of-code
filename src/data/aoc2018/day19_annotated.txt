[x] == register #x

[0] => result
[1] => outer loop variable
[2] => temporary register for calculations
[3] => inner loop variable
[4] => instruction pointer (used for jumps)
[5] => target number

==========================================
==========================================

#ip 4
addi 4 16 4     GOTO setup

    reset_outer:

seti 1 1 1      initialize [1] to 1

    reset_inner:

seti 1 7 3      initialize [3] to 1

    main_loop:

mulr 1 3 2      
eqrr 2 5 2      if [1] * [3] == [5]
addr 2 4 4          [0] += [1]
addi 4 1 4      
addr 1 0 0      
addi 3 1 3      [3] += 1      
gtrr 3 5 2      if [3] <= [5]
addr 4 2 4          GOTO main_loop
seti 2 3 4      

addi 1 1 1      [1] += 1
gtrr 1 5 2      if [1] <= [5] 
addr 2 4 4          GOTO reset_inner
seti 1 6 4      
mulr 4 4 4      HALT

    setup:

addi 5 2 5
mulr 5 5 5
mulr 4 5 5
muli 5 11 5
addi 2 1 2
mulr 2 4 2
addi 2 6 2
addr 5 2 5      initialize [5] to a high number
addr 4 0 4      GOTO part2_setup if [0] == 1
seti 0 0 4      GOTO reset_outer

    part2_setup:

setr 4 5 2
mulr 2 4 2
addr 4 2 2
mulr 4 2 2
muli 2 14 2
mulr 2 4 2
addr 5 2 5      initialize [5] to an even higher number
seti 0 5 0      [0] = 0
seti 0 2 4      GOTO reset_outer

==========================================
==========================================

IN SHORT:

for outer in 1..=target {
    for inner in 1..=target {
        if outer * inner == target {
            sum += outer;
        }
    }
}

That is, find the sum of all divisors.